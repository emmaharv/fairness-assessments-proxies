## Combine to create full population
pop <- rbind(green[sample(1:nrow(green), nrow(green) * (1 - pop.share.red)),],
red[sample(1:nrow(red), nrow(red) * (pop.share.red)),])
## Calculate the true TPRD (True Positive Rate Disparity)
true.tpr.red <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Red")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Red"))
true.tpr.green <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Green")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Green"))
true.tprd <- true.tpr.red - true.tpr.green
## Complete the demographic summary table - all individuals who don't display characteristic X1
## display characteristic X2
demographic.summary.table$X2 <- 1 - demographic.summary.table$X1
demographic.summary.table <- gather(demographic.summary.table, key="Characteristic", value="Proportion", 2:3)
## Repeat each check 10 times
for (j in 1:10) {
## Randomly assign individuals to be RED or GREEN based on their probability of being RED
tprd.accuracy.check$Red_Probability <- runif(nrow(tprd.accuracy.check))
tprd.accuracy.check <- tprd.accuracy.check %>%
mutate(Predicted_Color = ifelse(Red_Probability < Conditional, "Red", "Green"))
est.tpr.red <- nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Predicted_Color == "Red")) /
nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Predicted_Color == "Red"))
est.tpr.green <- nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Predicted_Color == "Green")) /
nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Predicted_Color == "Green"))
color.accuracy <- nrow(tprd.accuracy.check %>% filter(Color == Predicted_Color)) / nrow(tprd.accuracy.check)
## Calculate estimated TPRD
est.tprd <- est.tpr.red - est.tpr.green
tprd.delta <- rbind(data.frame(true.tprd=true.tprd, est.tprd=est.tprd,
color.accuracy=color.accuracy, red.share.x1=red.share.x1),
tprd.delta)
}
}
tprd.delta <- tprd.delta %>%
group_by(red.share.x1) %>%
summarise_all(function(x) round(mean(x), 2)) %>%
mutate(tprd.disparity = true.tprd - est.tprd)
write.csv(tprd.delta, paste0("Data/Simulated/", name, ".csv"), row.names=F)
}
rm(list=ls())
source("load_libraries_utilities.R")
## Set population size & share RED
pop.size <- 5000
pop.share.red = 0.5
## Set the predicted & actual probability of a "good" outcome for members of the GREEN group:
## 40% and 50%, respectively
pred.green <- 0.4
actual.green <- 0.5
## Set the predicted & actual probability of a "good" outcome for members of the RED group:
## 70% and 60%, respectively
pred.red <- 0.7
actual.red <- 0.6
## Define situations to assess
situations <- list(
list(name="when X1 is equally predictive for both subgroups"),
list(name="when X1 is more predictive for red individuals"),
list(name="when X1 is correlated with outcome"))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
## Run for each situation
for (i in 1:nrow(situations)) {
name <- situations[i, "name"]
## Measure accuracy of estimated TPRD at different assumed proportions of RED individuals with
## trait X1
tprd.delta <- data.frame()
for (red.share.x1 in c(1, 0.99, 0.95, 0.9, 0.8, 0.7,  0.6, 0.55, 0.5)) {
print(red.share.x1)
## Set value of green.share.x1 according to the scenario
if (name == "when X1 is equally predictive for both subgroups" |
name == "when X1 is correlated with outcome") {
green.share.x1 <- 1 - red.share.x1
} else {
green.share.x1 = 0.5
}
# GENERATE DATA
## Create a demographic summary table (share of individuals with each trait)
demographic.summary.table <- data.frame(Color=c("Red", "Green"), X1=c(red.share.x1, green.share.x1))
## Create a pool of green individuals
green <- data.frame(ID = 1:pop.size, Color="Green", Characteristic_Probability=runif(pop.size)) %>%
left_join(demographic.summary.table) %>%
mutate(Characteristic = ifelse(Characteristic_Probability < X1, "X1", "X2")) %>%
select(-Characteristic_Probability, -X1) %>%
mutate(Good_Outcome_Prob = runif(pop.size))
predicted.yes <- sample(1:nrow(green), pred.green * nrow(green), prob=green$Good_Outcome_Prob)
actual.yes <- sample(1:nrow(green), actual.green * nrow(green), prob=green$Good_Outcome_Prob)
green <- green %>%
mutate(Pred_Outcome = ifelse(ID %in% predicted.yes, 1, 0),
Actual_Outcome = ifelse(ID %in% actual.yes, 1, 0))
## Create a pool of red individuals
red <- data.frame(ID = 1:pop.size, Color="Red", Characteristic_Probability=runif(pop.size)) %>%
left_join(demographic.summary.table) %>%
mutate(Characteristic = ifelse(Characteristic_Probability < X1, "X1", "X2")) %>%
select(-Characteristic_Probability, -X1) %>%
mutate(Good_Outcome_Prob = runif(pop.size))
predicted.yes <- sample(1:nrow(red), pred.red * nrow(red), prob=red$Good_Outcome_Prob)
actual.yes <- sample(1:nrow(red), actual.red * nrow(red), prob=red$Good_Outcome_Prob)
red <- red %>%
mutate(Pred_Outcome = ifelse(ID %in% predicted.yes, 1, 0),
Actual_Outcome = ifelse(ID %in% actual.yes, 1, 0))
## Correlate the characteristic with a true positive according to the scenario
if (name == "when X1 is correlated with outcome") {
red = red %>%
mutate(Characteristic = ifelse(Pred_Outcome == 0 & Actual_Outcome == 1, Characteristic,
ifelse(runif(pop.size) < 0.3, Characteristic, "X2")))
}
## Combine to create full population
pop <- rbind(green[sample(1:nrow(green), nrow(green) * (1 - pop.share.red)),],
red[sample(1:nrow(red), nrow(red) * (pop.share.red)),])
## Calculate the true TPRD (True Positive Rate Disparity)
true.tpr.red <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Red")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Red"))
true.tpr.green <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Green")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Green"))
true.tprd <- true.tpr.red - true.tpr.green
## Complete the demographic summary table - all individuals who don't display characteristic X1
## display characteristic X2
demographic.summary.table$X2 <- 1 - demographic.summary.table$X1
demographic.summary.table <- gather(demographic.summary.table, key="Characteristic", value="Proportion", 2:3)
## Create priors
priors <- data.frame("Prior"=c(0 + pop.share.red, 1 - pop.share.red), "Color"= c("Red", "Green"))
## Use demographic summary table + priors to create conditionals
conditionals <- left_join(demographic.summary.table, priors, by="Color")
conditionals <- conditionals %>%
group_by(Characteristic) %>%
mutate(Weighted_Avg = weighted.mean(Proportion, Prior)) %>%
ungroup() %>%
mutate(Conditional = (Prior * Proportion) / Weighted_Avg)
conditionals <- conditionals %>% filter(Color == "Red") %>% select(Characteristic, Conditional)
tprd.accuracy.check <- pop %>% left_join(conditionals, by=c("Characteristic"))
## Repeat each check 10 times
for (j in 1:10) {
## Randomly assign individuals to be RED or GREEN based on their probability of being RED
tprd.accuracy.check$Red_Probability <- runif(nrow(tprd.accuracy.check))
tprd.accuracy.check <- tprd.accuracy.check %>%
mutate(Predicted_Color = ifelse(Red_Probability < Conditional, "Red", "Green"))
est.tpr.red <- nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Predicted_Color == "Red")) /
nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Predicted_Color == "Red"))
est.tpr.green <- nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Predicted_Color == "Green")) /
nrow(tprd.accuracy.check %>% filter(Actual_Outcome == 1 & Predicted_Color == "Green"))
color.accuracy <- nrow(tprd.accuracy.check %>% filter(Color == Predicted_Color)) / nrow(tprd.accuracy.check)
## Calculate estimated TPRD
est.tprd <- est.tpr.red - est.tpr.green
tprd.delta <- rbind(data.frame(true.tprd=true.tprd, est.tprd=est.tprd,
color.accuracy=color.accuracy, red.share.x1=red.share.x1),
tprd.delta)
}
}
tprd.delta <- tprd.delta %>%
group_by(red.share.x1) %>%
summarise_all(function(x) round(mean(x), 2)) %>%
mutate(tprd.disparity = true.tprd - est.tprd)
write.csv(tprd.delta, paste0("Data/Simulated/", name, ".csv"), row.names=F)
}
rm(list=ls())
source("load_libraries_utilities.R")
## Set population size & share RED
pop.size <- 100000
pop.share.red = 0.5
## Set the predicted & actual probability of a "good" outcome for members of the GREEN group:
## 40% and 50%, respectively
pred.green <- 0.4
actual.green <- 0.5
## Set the predicted & actual probability of a "good" outcome for members of the RED group:
## 70% and 60%, respectively
pred.red <- 0.7
actual.red <- 0.6
## Define situations to assess
situations <- list(
list(name="Randomly Assigned Perfect Identifier", red.share.x1=0.03, green.share.x1=0),
list(name="Randomly Assigned Near-Perfect Identifier", red.share.x1=0.03, green.share.x1=0.0003),
list(name="Randomly Assigned Less-Perfect Identifier", red.share.x1=0.03, green.share.x1=0.003),
list(name="Perfect Identifier Associated with a True Positive", red.share.x1=0.03, green.share.x1=0),
list(name="Perfect Identifier Associated with a False Negative", red.share.x1=0.03, green.share.x1=0))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
## Run for each situation
for (i in 1:nrow(situations)) {
name <- situations[i, "name"]
# GENERATE DATA
## Create a demographic summary table (share of individuals with each trait)
demographic.summary.table <- data.frame(Color=c("Red", "Green"), X1=c(red.share.x1, green.share.x1))
## Create a pool of green individuals
green <- data.frame(ID = 1:pop.size, Color="Green", Characteristic_Probability=runif(pop.size)) %>%
left_join(demographic.summary.table) %>%
mutate(Characteristic = ifelse(Characteristic_Probability < X1, "X1", "X2")) %>%
select(-Characteristic_Probability, -X1) %>%
mutate(Good_Outcome_Prob = runif(pop.size))
predicted.yes <- sample(1:nrow(green), pred.green * nrow(green), prob=green$Good_Outcome_Prob)
actual.yes <- sample(1:nrow(green), actual.green * nrow(green), prob=green$Good_Outcome_Prob)
green <- green %>%
mutate(Pred_Outcome = ifelse(ID %in% predicted.yes, 1, 0),
Actual_Outcome = ifelse(ID %in% actual.yes, 1, 0))
## Create a pool of red individuals
red <- data.frame(ID = 1:pop.size, Color="Red", Characteristic_Probability=runif(pop.size)) %>%
left_join(demographic.summary.table) %>%
mutate(Characteristic = ifelse(Characteristic_Probability < X1, "X1", "X2")) %>%
select(-Characteristic_Probability, -X1) %>%
mutate(Good_Outcome_Prob = runif(pop.size))
predicted.yes <- sample(1:nrow(red), pred.red * nrow(red), prob=red$Good_Outcome_Prob)
actual.yes <- sample(1:nrow(red), actual.red * nrow(red), prob=red$Good_Outcome_Prob)
red <- red %>%
mutate(Pred_Outcome = ifelse(ID %in% predicted.yes, 1, 0),
Actual_Outcome = ifelse(ID %in% actual.yes, 1, 0))
## Correlate the characteristic with a true positive according to the scenario
if (name == "Perfect Identifier Associated with a False Negative") {
red = red %>%
mutate(Characteristic = ifelse(Pred_Outcome == 0 & Actual_Outcome == 1, Characteristic,
ifelse(runif(pop.size) < 0.3, Characteristic, "X2")))
} else if (name == "Perfect Identifier Associated with a True Positive") {
red = red %>%
mutate(Characteristic = ifelse(Pred_Outcome == 1 & Actual_Outcome == 1, Characteristic,
ifelse(runif(pop.size) < 0.3, Characteristic, "X2")))
}
## Combine to create full population
pop <- rbind(green[sample(1:nrow(green), nrow(green) * (1 - pop.share.red)),],
red[sample(1:nrow(red), nrow(red) * (pop.share.red)),])
## Calculate the true TPRD (True Positive Rate Disparity)
true.tpr.red <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Red")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Red"))
true.tpr.green <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Green")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Green"))
true.tprd <- true.tpr.red - true.tpr.green
out.dat <- pop %>% mutate(
tp = Actual_Outcome == 1 & Pred_Outcome == 1,
pred.color = ifelse(Characteristic == "X1", "red", "green"))
write.csv(out.dat, paste0("Data/Simulated/", name, ".csv"), row.names=F)
}
## Run for each situation
for (i in 1:nrow(situations)) {
name <- situations[i, "name"]
red.share.x1 <- situations[i, "red.share.x1"] ## share of the RED group with characteristic X1
green.share.x1 <- situations[i, "green.share.x1"] ## share of the GREEN group with characteristic X1
# GENERATE DATA
## Create a demographic summary table (share of individuals with each trait)
demographic.summary.table <- data.frame(Color=c("Red", "Green"), X1=c(red.share.x1, green.share.x1))
## Create a pool of green individuals
green <- data.frame(ID = 1:pop.size, Color="Green", Characteristic_Probability=runif(pop.size)) %>%
left_join(demographic.summary.table) %>%
mutate(Characteristic = ifelse(Characteristic_Probability < X1, "X1", "X2")) %>%
select(-Characteristic_Probability, -X1) %>%
mutate(Good_Outcome_Prob = runif(pop.size))
predicted.yes <- sample(1:nrow(green), pred.green * nrow(green), prob=green$Good_Outcome_Prob)
actual.yes <- sample(1:nrow(green), actual.green * nrow(green), prob=green$Good_Outcome_Prob)
green <- green %>%
mutate(Pred_Outcome = ifelse(ID %in% predicted.yes, 1, 0),
Actual_Outcome = ifelse(ID %in% actual.yes, 1, 0))
## Create a pool of red individuals
red <- data.frame(ID = 1:pop.size, Color="Red", Characteristic_Probability=runif(pop.size)) %>%
left_join(demographic.summary.table) %>%
mutate(Characteristic = ifelse(Characteristic_Probability < X1, "X1", "X2")) %>%
select(-Characteristic_Probability, -X1) %>%
mutate(Good_Outcome_Prob = runif(pop.size))
predicted.yes <- sample(1:nrow(red), pred.red * nrow(red), prob=red$Good_Outcome_Prob)
actual.yes <- sample(1:nrow(red), actual.red * nrow(red), prob=red$Good_Outcome_Prob)
red <- red %>%
mutate(Pred_Outcome = ifelse(ID %in% predicted.yes, 1, 0),
Actual_Outcome = ifelse(ID %in% actual.yes, 1, 0))
## Correlate the characteristic with a true positive according to the scenario
if (name == "Perfect Identifier Associated with a False Negative") {
red = red %>%
mutate(Characteristic = ifelse(Pred_Outcome == 0 & Actual_Outcome == 1, Characteristic,
ifelse(runif(pop.size) < 0.3, Characteristic, "X2")))
} else if (name == "Perfect Identifier Associated with a True Positive") {
red = red %>%
mutate(Characteristic = ifelse(Pred_Outcome == 1 & Actual_Outcome == 1, Characteristic,
ifelse(runif(pop.size) < 0.3, Characteristic, "X2")))
}
## Combine to create full population
pop <- rbind(green[sample(1:nrow(green), nrow(green) * (1 - pop.share.red)),],
red[sample(1:nrow(red), nrow(red) * (pop.share.red)),])
## Calculate the true TPRD (True Positive Rate Disparity)
true.tpr.red <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Red")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Red"))
true.tpr.green <- nrow(pop %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Green")) /
nrow(pop %>% filter(Actual_Outcome == 1 & Color == "Green"))
true.tprd <- true.tpr.red - true.tpr.green
out.dat <- pop %>% mutate(
tp = Actual_Outcome == 1 & Pred_Outcome == 1,
pred.color = ifelse(Characteristic == "X1", "red", "green"))
write.csv(out.dat, paste0("Data/Simulated/", name, ".csv"), row.names=F)
}
true.tprd <- 0.318
## Define situations to graph
situations <- list(
list(name="Very Small, Balanced Disparity", pop.share.red=0.5, peak.accuracy=0.5),
list(name="Small, Balanced Disparity with Unequal Group Sizes", pop.share.red=0.2, peak.accuracy=0.2),
list(name="Medium, Unbalanced Disparity", pop.share.red=0.5, peak.accuracy=0.98))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
i <- 1
name <- situations[i, "name"]
pop.share.red <- situations[i, "pop.share.red"] ## true share of the population in the RED group
peak.accuracy <- situations[i, "peak.accuracy"] ## estimated share of the population in the RED group with peak accuracy in estimating TPRD
name
dat <- read.csv(paste0("Data/Simulated/", name, ".csv"))
dat <- dat %>% group_by(est.pop.share.red) %>% summarise_all(mean) %>% ungroup()
## Define situations to graph
situations <- list(
list(name="Very Small, Balanced Disparity", pop.share.red=0.5, peak.accuracy=0.5, title="Near-perfect proxy", subtitle="with equally-sized subgroups"),
list(name="Small, Balanced Disparity with Unequal Group Sizes", pop.share.red=0.2, peak.accuracy=0.2),
list(name="Medium, Unbalanced Disparity", pop.share.red=0.5, peak.accuracy=0.98))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
## Define situations to graph
situations <- list(
list(name="Very Small, Balanced Disparity", pop.share.red=0.5, peak.accuracy=0.5, title="Near-perfect proxy", subtitle="with equally-sized subgroups"),
list(name="Small, Balanced Disparity with Unequal Group Sizes", pop.share.red=0.2, peak.accuracy=0.2, title="Less-perfect proxy", subtitle="with unequally-sized subgroups"),
list(name="Medium, Unbalanced Disparity", pop.share.red=0.5, peak.accuracy=0.98, title="Less-perfect proxy", subtitle="that is more predictive for red individuals"))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
i <- 1
name <- situations[i, "name"]
pop.share.red <- situations[i, "pop.share.red"] ## true share of the population in the RED group
peak.accuracy <- situations[i, "peak.accuracy"] ## estimated share of the population in the RED group with peak accuracy in estimating TPRD
title <- situations[i, "title"]
subtitle <- situations[i, "subtitle"]
## Read data
dat <- read.csv(paste0("Data/Simulated/", name, ".csv"))
dat <- dat %>% group_by(est.pop.share.red) %>% summarise_all(mean) %>% ungroup()
## Set intercept values for graph
intercepts1 <- data.frame(y1=true.tprd, x1 = pop.share.red, x2 = peak.accuracy)
## Plot
plot1 <- ggplot() +
geom_hline(data=intercepts1, aes(yintercept = y1, color = "Actual TPRD"), size = 2) +
geom_vline(data=intercepts1, aes(xintercept = x2, color = "Peak TPRD accuracy"), size = 1) +
geom_vline(data=intercepts1, aes(xintercept = x1, color = "Actual % red"), size = 1, linetype="dashed") +
geom_point(data=dat, aes(x=est.pop.share.red, y=est.tprd, color = "Estimated TPRD"), size=3) +
ylim(0, 0.4) +
xlim(0, 1) +
scale_color_manual(values = c("darkgray", "#A6CEE3", "#1F78B4", "#6A3D9A")) +
labs(title=title, subtitle=subtitle, x ="\nEstimated % red", y = "TPRD", color = "") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(override.aes = list(linetype = 0, size = 4, shape = 15, alpha = 1),
nrow=2, byrow=T)) +
theme(plot.title=element_text(size=13, face="bold"),
plot.subtitle = element_text(size=11, face="italic"),
axis.title = element_text(size=11, colour="#5F5F5F"),
axis.text = element_text(size=10),
legend.text = element_text(size=10))
plot1
rm(list=ls())
source("load_libraries_utilities.R")
true.tprd <- 0.318
## Define situations to graph
situations <- list(
list(name="Very Small, Balanced Disparity", pop.share.red=0.5, peak.accuracy=0.5, title="Near-perfect proxy", subtitle="with equally-sized subgroups"),
list(name="Small, Balanced Disparity with Unequal Group Sizes", pop.share.red=0.2, peak.accuracy=0.2, title="Less-perfect proxy", subtitle="with unequally-sized subgroups"),
list(name="Medium, Unbalanced Disparity", pop.share.red=0.5, peak.accuracy=0.98, title="Less-perfect proxy", subtitle="that is more predictive for red individuals"))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
## Run for each situation
for (i in 1:nrow(situations)) {
name <- situations[i, "name"]
pop.share.red <- situations[i, "pop.share.red"] ## true share of the population in the RED group
peak.accuracy <- situations[i, "peak.accuracy"] ## estimated share of the population in the RED group with peak accuracy in estimating TPRD
title <- situations[i, "title"]
subtitle <- situations[i, "subtitle"]
## Read data
dat <- read.csv(paste0("Data/Simulated/", name, ".csv"))
dat <- dat %>% group_by(est.pop.share.red) %>% summarise_all(mean) %>% ungroup()
## Set intercept values for graph
intercepts1 <- data.frame(y1=true.tprd, x1 = pop.share.red, x2 = peak.accuracy)
## Plot
plot1 <- ggplot() +
geom_hline(data=intercepts1, aes(yintercept = y1, color = "Actual TPRD"), size = 2) +
geom_vline(data=intercepts1, aes(xintercept = x2, color = "Peak TPRD accuracy"), size = 1) +
geom_vline(data=intercepts1, aes(xintercept = x1, color = "Actual % red"), size = 1, linetype="dashed") +
geom_point(data=dat, aes(x=est.pop.share.red, y=est.tprd, color = "Estimated TPRD"), size=3) +
ylim(0, 0.4) +
xlim(0, 1) +
scale_color_manual(values = c("darkgray", "#A6CEE3", "#1F78B4", "#6A3D9A")) +
labs(title=title, subtitle=subtitle, x ="\nEstimated % red", y = "TPRD", color = "") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(override.aes = list(linetype = 0, size = 4, shape = 15, alpha = 1),
nrow=2, byrow=T)) +
theme(plot.title=element_text(size=13, face="bold"),
plot.subtitle = element_text(size=11, face="italic"),
axis.title = element_text(size=11, colour="#5F5F5F"),
axis.text = element_text(size=10),
legend.text = element_text(size=10))
ggsave(filename=paste0("Visuals/", name, ".pdf"), plot=plot1, device="pdf", height=4, width=4,
units="in", dpi=500)
}
## Define situations to graph
situations <- list(
list(name="when X1 is equally predictive for both subgroups"),
list(name="when X1 is more predictive for red individuals"),
list(name="when X1 is correlated with outcome"))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
i <- 1
name <- situations[i, "name"]
## Read data
dat <- read.csv(paste0("Data/Simulated/", name, ".csv"))
rm(list=ls())
true.tprd <- 0.318
## Define situations to graph
situations <- list(
list(name="when X1 is equally predictive for both subgroups", title="Dropoff in predictive power", subtitle="when X1 is equally predictive for both subgroups", ymin=0, ymax=0.4),
list(name="when X1 is more predictive for red individuals", title="Dropoff in predictive power", subtitle="when X1 is more predictive for red individuals", ymin=0, ymax=0.4),
list(name="when X1 is correlated with outcome", title="Dropoff in predictive power", subtitle="when X1 is correlated with outcome", ymin=-0.2, ymax=0.4))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
## Run for each situation
for (i in 1:nrow(situations)) {
name <- situations[i, "name"]
ymax <- situations[i, "ymax"]
ymin <- situations[i, "ymin"]
title <- situations[i, "title"]
subtitle <- situations[i, "subtitle"]
## Read data
dat <- read.csv(paste0("Data/Simulated/", name, ".csv"))
## Set intercept values for graph
intercepts1 <- data.frame(y1=true.tprd)
## Plot
plot1 <- ggplot() +
geom_hline(data=intercepts1, aes(yintercept = y1, color = "Actual TPRD"), size = 2) +
geom_point(data=dat, aes(x=red.share.x1, y=est.tprd, color = "Estimated TPRD"), size=3) +
ylim(ymin, ymax) +
scale_color_manual(values = c("#A6CEE3", "#1F78B4")) +
labs(title=title, subtitle=subtitle,
x ="\n% red individuals with trait X1", y = "TPRD", color = "") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(override.aes = list(linetype = 0, size = 4, shape = 15, alpha = 1))) +
theme(plot.title=element_text(size=13, face="bold"),
plot.subtitle = element_text(size=11, face="italic"),
axis.title = element_text(size=11, colour="#5F5F5F"),
axis.text = element_text(size=10),
legend.text = element_text(size=10))
ggsave(filename=paste0("Visuals/", name, ".pdf"), plot=plot1, device="pdf", height=4, width=4,
units="in", dpi=500)
}
rm(list=ls())
true.tprd <- 0.318
## Define situations to assess
situations <- list(
list(name="Randomly Assigned Perfect Identifier"),
list(name="Randomly Assigned Near-Perfect Identifier"),
list(name="Randomly Assigned Less-Perfect Identifier"),
list(name="Perfect Identifier Associated with a True Positive"),
list(name="Perfect Identifier Associated with a False Negative"))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
i <- 1
name <- situations[i, "name"]
dat <- read.csv(paste0("Data/Simulated/", name, ".csv"))
tpr.red = nrow(dat %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Red")) /
nrow(dat %>% filter(Actual_Outcome == 1 & Color == "Red"))
tpr.red = nrow(dat %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Red")) /
nrow(dat %>% filter(Actual_Outcome == 1 & Color == "Red"))
tpr.green = nrow(dat %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Green")) /
nrow(dat %>% filter(Actual_Outcome == 1 & Color == "Green"))
true.trpd = tpr.red - tpr.green
mean.tpr <- mean((dat %>% filter(pred.color == "Red"))$tp) / mean((dat %>% filter(pred.color == "Red"))$Actual_Outcome)
mean.tpr
mean.tpr <- mean((dat %>% filter(pred.color == "red"))$tp) / mean((dat %>% filter(pred.color == "red"))$Actual_Outcome)
mean.tpr
rm(list=ls())
true.tprd <- 0.318
## Define situations to assess
situations <- list(
list(name="Randomly Assigned Perfect Identifier"),
list(name="Randomly Assigned Near-Perfect Identifier"),
list(name="Randomly Assigned Less-Perfect Identifier"),
list(name="Perfect Identifier Associated with a True Positive"),
list(name="Perfect Identifier Associated with a False Negative"))
situations <- as.data.frame(do.call(rbind, situations))
situations <- situations %>% mutate_all(unlist)
## Run for each situation
for (i in 1:nrow(situations)) {
true.share.pop.green <- 0.5
name <- situations[i, "name"]
dat <- read.csv(paste0("Data/Simulated/", name, ".csv"))
tpr.red = nrow(dat %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Red")) /
nrow(dat %>% filter(Actual_Outcome == 1 & Color == "Red"))
tpr.green = nrow(dat %>% filter(Actual_Outcome == 1 & Pred_Outcome == 1 & Color == "Green")) /
nrow(dat %>% filter(Actual_Outcome == 1 & Color == "Green"))
true.trpd = tpr.red - tpr.green
est.tpr.red <- mean((dat %>% filter(pred.color == "red"))$tp) / mean((dat %>% filter(pred.color == "red"))$Actual_Outcome)
pop.share.green = seq(0, 1, 0.01)
out <- data.frame(pop.share.green = pop.share.green,
est.tpr.red = est.tpr.red,
est.tpr.green = ((mean(dat$tp) / mean(dat$Actual_Outcome)) - (est.tpr.red * (1 - pop.share.green))) / (pop.share.green))
out <- out %>%
mutate(est.tpr.green = ifelse(est.tpr.green < 0 | est.tpr.green > 1, NA, est.tpr.green),
tprd = est.tpr.red - est.tpr.green)
intercepts1 <- data.frame(y1=true.trpd, y2=est.tpr.red, y3=tpr.red, x1=true.share.pop.green)
ylim_bottom = ifelse(name == "Perfect Identifier Associated with a False Negative", -0.5, 0)
plot1 <- ggplot() +
geom_hline(data=intercepts1, aes(yintercept = y1, color = "Actual TPRD"), size = 2) +
geom_hline(data=intercepts1, aes(yintercept = y2, color = "Est. red TPR"), size = 1) +
geom_hline(data=intercepts1, aes(yintercept = y3, color = "Actual red TPR"), size = 1) +
geom_vline(data=intercepts1, aes(xintercept = x1, color = "Actual % green"), size = 1, linetype="dashed") +
geom_point(data=out, aes(x=pop.share.green, y=tprd, color = "Est. TPRD"), size=3) +
ylim(ylim_bottom, 1) +
xlim(0, 1) +
scale_color_manual(values = c("darkgray", "#A6CEE3", "#33A02C", "#1F78B4", "#6A3D9A")) +
labs(title=name,
x ="\nEstimated % green", y = "TPR", color = "") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(override.aes = list(linetype = 0, size = 4, shape = 15, alpha = 1),
nrow=2, byrow=T)) +
theme(plot.title=element_text(size=13, face="bold"),
plot.subtitle = element_text(size=11, face="italic"),
axis.title = element_text(size=11, colour="#5F5F5F"),
axis.text = element_text(size=10),
legend.text = element_text(size=10))
ggsave(filename=paste0("Visuals/", name, ".pdf"), plot=plot1, device="pdf", height=5, width=5,
units="in", dpi=500)
}
